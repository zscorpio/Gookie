name: Build Gookie

on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build: [
          {name: windows, os: windows-latest, platform: windows, arch: amd64},
          {name: macos-amd64, os: macos-latest, platform: darwin, arch: amd64},
          {name: macos-arm64, os: macos-latest, platform: darwin, arch: arm64},
          {name: linux-amd64, os: ubuntu-latest, platform: linux, arch: amd64},
        ]
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies (Linux)
        if: matrix.build.platform == 'linux'
        run: |
          sudo apt-get update
          # Check Ubuntu version and install appropriate WebKit package
          . /etc/os-release
          echo "Ubuntu version: $VERSION_ID"
          if [[ "$VERSION_ID" == "22.04" || "$VERSION_ID" > "22.04" ]]; then
            echo "Installing WebKit 4.1 for Ubuntu 22.04+"
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev
          else
            echo "Installing WebKit 4.0 for Ubuntu pre-22.04"
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
          fi

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Playwright dependencies
        run: go run github.com/playwright-community/playwright-go/cmd/playwright install --with-deps chromium

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Wails App
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.build.platform }}
          GOARCH: ${{ matrix.build.arch }}
        run: |
          # Ensure build directory exists
          mkdir -p build/bin
          
          echo "Building for platform=${{ matrix.build.platform }} arch=${{ matrix.build.arch }}"
          
          if [ "${{ matrix.build.platform }}" = "windows" ]; then
            echo "Building for Windows..."
            wails build -platform windows/amd64
          elif [ "${{ matrix.build.platform }}" = "darwin" ] && [ "${{ matrix.build.arch }}" = "arm64" ] && [ "${{ runner.os }}" = "macOS" ]; then
            echo "Building for macOS ARM64..."
            wails build -platform darwin/arm64
          elif [ "${{ matrix.build.platform }}" = "darwin" ] && [ "${{ matrix.build.arch }}" = "amd64" ]; then
            echo "Building for macOS AMD64..."
            wails build -platform darwin/amd64
          elif [ "${{ matrix.build.platform }}" = "linux" ]; then
            echo "Building for Linux..."
            # Check Ubuntu version for correct WebKit package
            . /etc/os-release
            echo "Ubuntu version: $VERSION_ID"
            if [[ "$VERSION_ID" == "22.04" || "$VERSION_ID" > "22.04" ]]; then
              # For Ubuntu 22.04+, we need to use webkit2gtk-4.1
              echo "Configuring for WebKit 4.1..."
              export PKG_CONFIG_PATH="/usr/lib/pkgconfig"
              # Use sed to create a temporary pkg-config file that redirects webkit2gtk-4.0 to webkit2gtk-4.1
              mkdir -p $HOME/.pkgconfig
              cat > $HOME/.pkgconfig/webkit2gtk-4.0.pc << EOF
# Proxy webkit2gtk-4.0 to webkit2gtk-4.1
Name: webkit2gtk-4.0
Description: Legacy webkit2gtk-4.0 proxy to webkit2gtk-4.1
Version: 4.0.0
Requires: webkit2gtk-4.1
Cflags: \`pkg-config --cflags webkit2gtk-4.1\`
Libs: \`pkg-config --libs webkit2gtk-4.1\`
EOF
              export PKG_CONFIG_PATH="$HOME/.pkgconfig:$PKG_CONFIG_PATH"
              pkg-config --exists webkit2gtk-4.0 && echo "webkit2gtk-4.0 config found!" || echo "webkit2gtk-4.0 config NOT found"
            fi
            wails build -platform linux/amd64
          else
            echo "Using default build settings..."
            wails build
          fi
          
          echo "Build complete. Listing output directory:"
          ls -la build
          
          if [ -d "build/bin" ]; then
            echo "Contents of build/bin:"
            ls -la build/bin
          fi
        shell: bash

      - name: Rename binary
        run: |
          echo "Platform: ${{ matrix.build.platform }}, Architecture: ${{ matrix.build.arch }}"
          echo "Listing all files in build directory:"
          find build -type f | sort
          
          if [ "${{ matrix.build.platform }}" = "windows" ]; then
            echo "Processing Windows build..."
            if [ -f "build/bin/Gookie.exe" ]; then
              echo "Found binary at build/bin/Gookie.exe"
              mv build/bin/Gookie.exe build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}.exe
            elif [ -f "build/windows/Gookie.exe" ]; then
              echo "Found binary at build/windows/Gookie.exe"
              mkdir -p build/bin
              mv build/windows/Gookie.exe build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}.exe
            else
              echo "Windows binary not found at expected locations"
              echo "Searching for .exe files:"
              find build -name "*.exe" -type f
              exit 1
            fi
          elif [ "${{ matrix.build.platform }}" = "darwin" ]; then
            # For macOS builds, check for app bundle
            if [ -d "build/bin/Gookie.app" ]; then
              # First, copy the executable out of the app bundle
              cp "build/bin/Gookie.app/Contents/MacOS/Gookie" "build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}"
              # Then create a zip of the entire app bundle
              cd build/bin
              zip -r "Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}-app.zip" Gookie.app || echo "Warning: zip failed but continuing"
              cd ../..
            elif [ -f "build/bin/Gookie" ]; then
              mv build/bin/Gookie build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}
            elif [ -f "build/darwin/Gookie" ]; then
              mv build/darwin/Gookie build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}
            else
              echo "Binary not found at expected location for ${{ matrix.build.platform }}"
              find build -type f -not -path "*/\.*" | grep -v "\.html$\|\.js$\|\.css$"
              exit 1
            fi
          else
            # For Linux builds
            if [ -f "build/bin/Gookie" ]; then
              mv build/bin/Gookie build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}
            else
              echo "Binary not found at expected location for ${{ matrix.build.platform }}"
              find build -type f -not -path "*/\.*" | grep -v "\.html$\|\.js$\|\.css$"
              exit 1
            fi
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Gookie-${{ matrix.build.name }}
          path: |
            build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}*
            build/bin/Gookie*
            build/windows/*.exe
            build/darwin/*
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 