name: Build Gookie

on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build: [
          {name: windows, os: windows-latest, platform: windows, arch: amd64},
          {name: macos-amd64, os: macos-latest, platform: darwin, arch: amd64},
          {name: macos-arm64, os: macos-latest, platform: darwin, arch: arm64},
          {name: linux-amd64, os: ubuntu-latest, platform: linux, arch: amd64},
        ]
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies (Linux)
        if: matrix.build.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Playwright dependencies
        run: go run github.com/playwright-community/playwright-go/cmd/playwright install --with-deps chromium

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Wails App
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.build.platform }}
          GOARCH: ${{ matrix.build.arch }}
        run: |
          # Ensure build directory exists
          mkdir -p build/bin
          
          if [ "${{ matrix.build.platform }}" = "darwin" ] && [ "${{ matrix.build.arch }}" = "arm64" ] && [ "${{ runner.os }}" = "macOS" ]; then
            wails build -platform darwin/arm64 -o Gookie
          else
            wails build -o Gookie
          fi
        shell: bash

      - name: Rename binary
        run: |
          if [ "${{ matrix.build.platform }}" = "windows" ]; then
            if [ -f "build/bin/Gookie.exe" ]; then
              mv build/bin/Gookie.exe build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}.exe
            else
              echo "Windows binary not found at expected location"
              find build -name "*.exe" -type f
              exit 1
            fi
          else
            # For macOS/Linux builds
            if [ -f "build/bin/Gookie" ]; then
              mv build/bin/Gookie build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}
            elif [ -f "build/darwin/Gookie" ] && [ "${{ matrix.build.platform }}" = "darwin" ]; then
              # Special case for macOS builds that might output to different directory
              mv build/darwin/Gookie build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}
            else
              echo "Binary not found at expected location for ${{ matrix.build.platform }}"
              find build -type f -not -path "*/\.*" | grep -v "\.html$\|\.js$\|\.css$"
              exit 1
            fi
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Gookie-${{ matrix.build.name }}
          path: |
            build/bin/Gookie-${{ matrix.build.platform }}-${{ matrix.build.arch }}*
            build/bin/Gookie*
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 